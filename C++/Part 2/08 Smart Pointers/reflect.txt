Name: Yongtak Jun
Email: yjun4@myseneca.ca
Date: Mar/26/2021


This week, we have learned smart pointer. I felt it is really useful tool. Because when we allocate 
memory dynamically, if we use raw pointer, we have to deallocate the memory region by ourselves. 
Otherwise, it will cause a memory leak. However, if we use smart pointer, the smart pointer will 
deallocate the memory region when it goes out of scope by itself. Therefore, we do not need to 
worry about memory leak. That means when we use raw pointer, before the pointer goes out of 
scope, we have to deallocate the memory using ¡®delete¡¯ keyword like this:
delete newProduct;
However, when we use smart pointer, we do not need to code that.

When we allocate the memory dynamically using raw pointer, as we have coded so far, we could 
code like this:
Product* newProduct = new Product(desc, price);
On the other hand, basically, smart pointer is based on templated class, so we could code like this:
unique_ptr<Product> newProduct(new Product(desc, price));
The object of unique_ptr template class which is ¡®newProduct¡¯ now can be used just like 
pointer. In other words, smart pointer.

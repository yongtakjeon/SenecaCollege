Name: Yongtak Jun
Email: yjun4@myseneca.ca
Date: March/31/2021


This week, we have learned about thread. Basically, if we use multiple threads, it allows us to do 
multi-tasking, and it saves a lot of time, and do the work more efficiently. For example in real life, 
let¡¯s say we have to do washing the clothes, and vacuuming the floor. If we work just synchronously, 
it means the code have to be executed line by line in order so that while washing machine washes 
the clothes, we just have to wait until the washing machine finishes the washing, then we could dry 
the clothes, and vacuum the floor. On the other hand, if we work asynchronously using multiple 
threads, while washing machine washes the clothes, we could vacuum the floor, and when the 
washing machine finishes its work, we could dry the clothes. Like this, using thread, we could make 
more efficient and faster program.

In C++, to create child thread, we create thread object passing the task. After we make child threads 
and let them execute their work, we have to wait until child threads finishes their job and reunites 
with its parent thread. To do this, we use join() member function.

Furthermore, I had chance to bind the function to its arguments using bind() function template. I 
had to pass converter() task when I create threads, and only different argument when I pass the 
converter() task to each thread was the text that each thread has to convert. Therefore, I could just 
bind the converter() function to its other arguments except for the text argument so that when I 
pass the converter() function to each thread, I could only send the text argument which makes code 
more concise and simple.

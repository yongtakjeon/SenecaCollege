Name: Yongtak Jun
Email: yjun4@myseneca.ca
Date: Apr/18/2020



While we are making this program, we divided many tasks into many functions which we have 
created. Firstly, I consider those functions could be classified into 3 parts based on their 
functionalities. First part would be considered as a smallest part of our program such as get Integer 
value or get proper category or display certain part such as displaying age group. These functions 
are really useful and reusable when used in other functions, also they improve readability of code. 
Second part would be the functions which execute each number of menu such as printing top 3 
riders or all riders or winners. We divided these functions independently as each function’s 
functionality and way of coding are different each other. Third part’s function would be considered 
as a main part of our program which calls the menu function and executes corresponding function 
based on selected number from user. Furthermore, for each functions, we were trying to make each 
functions independently dividing by its own functionality so that it can be cohesive with other 
functions. Overall, by creating those functions by its own functionality, the most thing that I liked 
was readability. It looked organized and it was easy to understand the code.


From the menu option 1 to 3, we had to receive the input value for categories among S, M, or L. 
We could’ve coded every time for receiving the input value when we code for menu 1, 2, and 3. 
However, it has same process and same output, so we thought it is waste of memory and bad for 
readability as well to code every time for menu 1, 2, and 3. Therefore, we decided to make the 
function which prompts and returns the input value among S, M, or L so that we can reuse this 
function whenever we need. By creating this function, instead of coding three times (for menu 1, 2, 
and 3) to prompt the value and check the value if it is a correct value which needs a number of 
lines to code, we just needed one line to call the function. As a result of that, we could prevent the 
memory from wasting, and it made code look more organized, and easy to understand.



When readFileRecord() function reads the data from a file, last field of line which is withdrawn may 
or may not be present, so I will explain how readFileRecord() function deals with last field part 
dividing into two examples which are when the line has withdrawn field, and when it has not. First, 
this is when the line has withdrawn field. First, this function of last filed part starts from reading 
one character from a file using fgetc() function, and assigning that to variable ‘ch’. The withdrawn 
mark in the file which is ‘W’ is marked one ‘ ‘ (space) after finishTime field, so in this case, ‘ ‘ (space) 
is assigned to variable ‘ch’. Next step is assigning withdrawn member to 0. After that, it checks if 
‘ch’ holds ‘ ‘ (space). In this case, as it is true, the code block would be executed. In the code block, 
it reads one character again and assigns it to ‘ch’, so now, the ‘ch’ would have ‘W’ which is withdrawn 
mark. In the next line, it checks if ‘ch’ is ‘W’, and if it is true, assigns 1 to withdrawn member, if it 
false, assigns 0 to withdrawn member. Since it is true this time, withdrawn member has value of 1 
now. For the next step, it reads one character again from a file and assigns it to ‘ch’. Now, since it 
would be end of line, the ‘ch’ would hold ‘\n’ (new line), and the code block is finished. Next step 
is clearing the input file buffer until end of line or record. Using while loop, it checks if it is not the 
end of file, and if the ‘ch’ does not hold ‘\n’ (new line). If it is true, it reads a character from a file, 
and assigns it to ‘ch’ until the end of record has been reached, or ‘ch’ holds ‘\n’ (new line) which 
means end of line, and the function is terminated returning the value of ‘result’. In this time, ‘ch’
would hold the ‘\n’ (new line), clearing input file buffer section would be skipped, but if there is a 
more character, for example ‘ ‘ (space), it would be executed until end of record or line has been 
reached.
Now, this is when the line does not have withdrawn field. It starts from reading one character from 
a file, and assigning that to ‘ch’. Since it does not have withdrawn field, ‘\n’ (new line) would be 
assigned to ‘ch’. Next, 0 is assigned to withdrawn field, and since ‘ch’ has ‘\n’ (new line), ‘if’ code 
block would be skipped, and it goes to clearing input file buffer section straightaway, and rest of 
the part would be the same with when the line has withdrawn field. 

Alternatively, I could’ve used this logic.

ch = fgetc(fp);
info->withdrawn = 0;

while (!feof(fp) && ch != '\n' && info->withdrawn == 0)
{
	info->withdrawn = ch == 'W';
	ch = fgetc(fp);
}

while (!feof(fp) && ch != '\n')
{
	ch = fgetc(fp);
}


This is when the line has withdrawn field in this new logic. It starts from reading one character from 
file and assigning to variable ‘ch’, and 0 is assigned to withdrawn member. So far, it is just same. 
The variable ‘ch’ would hold ‘ ‘ (space). However, after this, using while loop, it checks if it is not the 
end of file, and if the ‘ch’ does not hold ‘\n’ (new line), and if the withdrawn member is 0. Since it 
is true this time, the while loop is executed. In the while loop, it checks if ‘ch’ is ‘W’, and if it is true, 
assigns 1 to withdrawn member, if it is false, assigns 0 to withdrawn member. This time, it is false, 
so the withdrawn member keeps the value of 0. Next, it reads one character again and assigns it to 
‘ch’, so ‘ch’ would hold ‘W’ now. For the next step, the while loop’s condition part is executed again, 
and since it is true again, in the while loop’s code block, it checks if ‘ch’ is ‘W’ again. Since it is true 
for this time, 1 is assigned to the withdrawn member. This would make the while loop terminated, 
and it reads one character and assigns it to ‘ch’, so now, ‘ch’ would have ‘\n’ (new line), and since 
the while loop’s condition part turns out false, it goes to clear input file buffer section. This section 
is the same with last logic. Now, this is when the line does not have withdrawn field. It starts from 
reading one character from a file and assigning to variable ‘ch’, and 0 is assigned to withdrawn 
member. This time, since ‘ch’ would hold ‘\n’ (new line), while loop is not executed, and the clear 
input file buffer part also would be skipped.



